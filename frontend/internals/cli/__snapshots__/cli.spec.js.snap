// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Test CLI functions Create a classbased component Check content of MainComponent index.js 1`] = `
"import MainComponent from './MainComponent';

export default MainComponent;
"
`;

exports[`Test CLI functions Create a classbased component Check content of MainComponent.test.js 1`] = `
"import React from 'react';
import renderer from 'react-test-renderer';
import MainComponent from './';
// import data from './MainComponent.json';

describe('<MainComponent />', () => {
    it('Renders an empty MainComponent', () => {
        const componentJson = renderer
            .create(<MainComponent />)
            .toJSON();
        expect(componentJson).toBeTruthy();
    });

    /*
    it('Renders MainComponent with data', () => {
        const componentJson = renderer
            .create(<MainComponent {...data} />)
            .toJSON();
        expect(componentJson).toMatchSnapshot();
    });
    */
});
"
`;

exports[`Test CLI functions Create a classbased component Check content of class MainComponent.js 1`] = `
"import React, { PureComponent } from 'react';

export default class MainComponent extends PureComponent {
    state = {
    }

    static defaultProps = {
    }

    render() {
        return (
            <div className=\\"MainComponent\\">
                MainComponent
            </div>
        );
    }
}
"
`;

exports[`Test CLI functions Create a classbased component Check content of classbased MainComponent.json 1`] = `
"{}
"
`;

exports[`Test CLI functions Create a classbased component Check content of classbased MainComponent.scss 1`] = `
".MainComponent {
}"
`;

exports[`Test CLI functions Create a classbased component Should have updated app components.scss 1`] = `
"@import '../components/MainComponent/MainComponent';
"
`;

exports[`Test CLI functions Create a classbased component Should have updated app index.js 1`] = `
"import MainComponent from './MainComponent';

export {
    MainComponent,
};"
`;

exports[`Test CLI functions Create containers Check content of class MyContainer.js 1`] = `
"import React, { PureComponent } from 'react';

export default class MyContainer extends PureComponent {
    state = {
    }

    static defaultProps = {
    }

    render() {
        return (
            <div className=\\"MyContainer\\">
                MyContainer
            </div>
        );
    }
}
"
`;

exports[`Test CLI functions Create containers Should have updated app containers.scss 1`] = `""`;

exports[`Test CLI functions Create containers Should have updated container index.js 1`] = `
"
export {
};"
`;

exports[`Test CLI functions Delete components Deletes component folder and files 1`] = `""`;

exports[`Test CLI functions Delete components Deletes component folder and files 2`] = `
"
export {
};"
`;

exports[`Test CLI functions Delete components Deletes subcomponent folder and files 1`] = `
"@import '../components/MainComponent/MainComponent';
"
`;

exports[`Test CLI functions Delete components Deletes subcomponent folder and files 2`] = `
"import MainComponent from './MainComponent';

export {
    MainComponent,
};"
`;

exports[`Test CLI functions Publish components Should have a component file 1`] = `
"<!doctype html>
<html class=\\"no-js\\" lang=\\"en\\">
    <head>
        <meta charset=\\"utf-8\\">
        <meta http-equiv=\\"x-ua-compatible\\" content=\\"ie=edge\\">
        <title>React testing ground</title>
        <meta name=\\"description\\" content=\\"\\">
        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">

        <link rel=\\"stylesheet\\" href=\\"/devserver.css\\">
        <link rel=\\"stylesheet\\" href=\\"/static/css/index.css\\">
    </head>
    <body onload=\\"document.documentElement.classList.remove('no-js');\\">
        <div class=\\"devserver\\">
            <form class='devserver__themeform' id='devserver__menu'>
                <a href='/' class='devserver__backlink'>Back to listing</a>
                
                <select
                    class='devserver__themeselect'
                    name='componentName'
                    onChange='devFormChangeComponent(this);'
                    >
                    <option disabled>Choose</option>
                    <option disabled>-Containers</option>
                    <option >MyContainer</option>
                    <option disabled>-Components</option>
                    <option selected>MainComponent</option>
                </select>
            </form>
        </div>
        
        <div id=\\"root\\"><div class=\\"MainComponent\\" data-reactroot=\\"\\">MainComponent</div></div>

        
        <script src=\\"/devserver.js\\"></script>
        <script src=\\"/static/js/vendor.js\\"></script>
        <script src=\\"/static/js/index.js\\"></script>
        <script>
    ReactDOM.hydrate(React.createElement(Components.MainComponent, {}), document.getElementById(\\"root\\"));
</script>
    </body>
</html>
"
`;

exports[`Test CLI functions Publish components Should have a dev css file 1`] = `"hej"`;

exports[`Test CLI functions Publish components Should have a dev js file 1`] = `"hej"`;

exports[`Test CLI functions Publish components Should have a listing file 1`] = `
"<!doctype html>
<html class=\\"no-js\\" lang=\\"en\\">
    <head>
        <meta charset=\\"utf-8\\">
        <meta http-equiv=\\"x-ua-compatible\\" content=\\"ie=edge\\">
        <title>React testing ground</title>
        <meta name=\\"description\\" content=\\"\\">
        <meta name=\\"viewport\\" content=\\"width=device-width, initial-scale=1\\">

        <link rel=\\"stylesheet\\" href=\\"/devserver.css\\">
        <link rel=\\"stylesheet\\" href=\\"/static/css/index.css\\">
    </head>
    <body onload=\\"document.documentElement.classList.remove('no-js');\\">
        <div class=\\"devserver\\">
            <form class='devserver__themeform' id='devserver__menu'>
                <a href='/' class='devserver__backlink'>Back to listing</a>
                
                <select
                    class='devserver__themeselect'
                    name='componentName'
                    onChange='devFormChangeComponent(this);'
                    >
                    <option disabled>Choose</option>
                    <option disabled>-Containers</option>
                    <option >MyContainer</option>
                    <option disabled>-Components</option>
                    <option >MainComponent</option>
                </select>
            </form>
        </div>
        
        <h2 class='devserver__title'>Containers</h2>
        <a href=\\"/MyContainer\\">MyContainer</a><br/>
<br />
        <h2 class='devserver__title'>Components</h2>
        <a href=\\"/MainComponent\\">MainComponent</a><br/>
<div id=\\"root\\"></div>
        
        <script src=\\"/devserver.js\\"></script>
        <script src=\\"/static/js/vendor.js\\"></script>
        <script src=\\"/static/js/index.js\\"></script>
        <!-- render -->
    </body>
</html>
"
`;

exports[`Test CLI functions Publish components Should have a static css file 1`] = `"css"`;

exports[`Test CLI functions Publish components Should have a static js file 1`] = `"js"`;

exports[`Test CLI functions Test pure based subcomponent Check content of SubComponent index.js 1`] = `
"import SubComponent from './SubComponent';

export default SubComponent;
"
`;

exports[`Test CLI functions Test pure based subcomponent Check content of SubComponent.json 1`] = `
"{}
"
`;

exports[`Test CLI functions Test pure based subcomponent Check content of SubComponent.scss 1`] = `
".SubComponent {
}"
`;

exports[`Test CLI functions Test pure based subcomponent Check content of SubComponent.test.js 1`] = `
"import React from 'react';
import renderer from 'react-test-renderer';
import SubComponent from './';
// import data from './SubComponent.json';

describe('<SubComponent />', () => {
    it('Renders an empty SubComponent', () => {
        const componentJson = renderer
            .create(<SubComponent />)
            .toJSON();
        expect(componentJson).toBeTruthy();
    });

    /*
    it('Renders SubComponent with data', () => {
        const componentJson = renderer
            .create(<SubComponent {...data} />)
            .toJSON();
        expect(componentJson).toMatchSnapshot();
    });
    */
});
"
`;

exports[`Test CLI functions Test pure based subcomponent Check content of pure SubComponent.js 1`] = `
"import React, { PureComponent } from 'react';

export default class SubComponent extends PureComponent {
    state = {
    }

    static defaultProps = {
    }

    render() {
        return (
            <div className=\\"SubComponent\\">
                SubComponent
            </div>
        );
    }
}
"
`;

exports[`Test CLI functions Test pure based subcomponent Should NOT have updated app components.scss 1`] = `
"@import '../components/MainComponent/MainComponent';
"
`;

exports[`Test CLI functions Test pure based subcomponent Should NOT have updated app index.js 1`] = `
"import MainComponent from './MainComponent';

export {
    MainComponent,
};"
`;
